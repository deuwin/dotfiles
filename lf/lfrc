# interpreter for shell commands
set shell zsh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-euy'

# add borders around columns
set drawbox

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# Use NerdFont icons
set icons true

# use enter for shell commands
map <enter> shell

# show the result of execution of previous commands
map ` !true

# show hidden files with .
map . set hidden!

# set prompt colours
set promptfmt "\033[38;5;247m%u\033[37m@\033[32m%h\033[0m:\033[34m%d\033[0m%f\033[0m"

# truncate long filenames with ellipsis
set truncatechar â€¦

# ensure pager has colour and won't automatically close
map i $less --RAW-CONTROL-CHARS -+--quit-if-one-screen "$f"

# preview using lesspipe.sh
set previewer ~/.config/lf/pv.sh

# enable incremental searching
set incsearch true

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# unmap M so following commands work
map M

# mkdir command - can create subdirectories and selects newly created directory
cmd mkdir %{{
    IFS=" "
    mkdir -p -- "$*"
    lf -remote "send $id select \"$*\""
}}
map Md push :mkdir<space>

# make file
cmd mk_file %{{
    local file="$1"
    if [[ -e $file ]]; then
        print "\"$file\" already exists!"
        return
    fi
    touch $file
    lf -remote "send $id select \"$file\""
}}
map Mf push :mk_file<space>

# reload config file
cmd reload-config ${{
    lf -remote "send $id source ~/.config/lf/lfrc"
}}
map R reload-config

# move current file or selected files to trash folder
cmd trash %{{
    # collate files to be deleted
    local -a file_arr
    file_arr=("${(@f)fx}")

    # prompt user
    local prompt="Delete "
    if ((${#file_arr[@]} > 1)); then
        prompt+="${#file_arr[@]} files/directories? "
    else
        prompt+="${f}? "
    fi
    print "$prompt"
    local input
    read input

    # act on response
    if [[ "$input" = "y" ]]; then
        print "Deleting!"
        gio trash $file_arr
    else
        lf -remote "send $id unselect"
        print "Cancelled"
    fi
}}
map <delete> :trash
