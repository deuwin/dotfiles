####
# Keybinds
#   - display current bindings with `tmux list-keys`
#   - TODO should prolly map some preconfigured layouts to the F keys
#
# Aliases Used
#    bind = bind-key

# xterm compatible keycodes, this also enables 256 colour
# https://github.com/tmux/tmux/wiki/FAQ#how-do-i-make-modified-function-and-arrow-keys-like-c-up-m-pageup-work-inside-tmux
# https://github.com/tmux/tmux/wiki/FAQ#how-do-i-use-a-256-colour-terminal
set-option -g default-terminal "tmux-256color"

# remap prefix from 'Ctrl+b' to 'Ctrl+f'
set-option -g prefix C-f
# send <prefix> to shell: <prefix>-<prefix>
bind C-f send-prefix

# reload config file
#   <prefix>-r
set-option -g @debug 0
if-shell -F "#{@debug}" {
    # message not displayed so errors and other messages can be seen
    bind r source-file -F "#{@TMUX_DIR}/tmux.conf"
}{
    bind r source-file -F "#{@TMUX_DIR}/tmux.conf" \; \
           display-message -d 900 " tmux config reloaded!"
}

# paste from tmux buffer
#   <prefix>-p
bind p paste-buffer -p

# clear both screen and history
#   Ctrl+l
bind -n C-l send-keys C-l \; run-shell "sleep 0.2" \; clear-history


##
# Copy Mode
#
# enter copy mode
#   <prefix>-ArrowUp
bind Up copy-mode \; send-keys -X cursor-up

# enter copy mode and move up half screen
#   PageUp
# only activates when on the command prompt, if not PageUp is sent as normal
%hidden is_mode_or_screen="#{||:#{pane_in_mode},#{alternate_on}}"
%hidden is_not_zsh="#{!=:#{pane_current_command},zsh}"
bind -n PageUp if-shell -F "#{||:#{E:$is_mode_or_screen},#{E:$is_not_zsh}}" {
        send-keys PageUp
    } {
        copy-mode -e
        send-keys -X halfpage-up
    }

# enter copy mode and search up
#   <prefix>-?
bind ? copy-mode \; \
    command-prompt -i -p "(search up)" {
        send-keys -X search-backward-incremental "%%"
    }

# copy mode keys, closer to those in vim
#   v - visual-select
#   y - yank
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel
bind -T copy-mode-vi Y send-keys -X copy-pipe-and-cancel "tmux paste-buffer"
# I would unbind this but tmux plugin manager seems to use it
# unbind -T copy-mode-vi Enter; # copy-selection


##
# Sessions
#
# new session
#   <prefix>-N
# refresh-client for timely status bar updates
bind N new-session \; refresh-client

# change session
#   Alt+ArrowUp
#   Alt+ArrowDown
bind -n M-Up   switch-client -p
bind -n M-Down switch-client -n

# select session/window, sorted by name
#   <prefix>-s
bind s choose-tree -sZ -O name


##
# Windows
#
# new-window
#   <prefix>-n
bind n new-window -c "#{pane_current_path}"

# change active window
#   Alt+ArrowLeft
#   Alt+ArrowRight
bind -n M-Left  select-window -p
bind -n M-Right select-window -n

# change to previously active window
#   <prefix>-`^`
bind ^ last-window

# move window
#   <prefix>-`<`
#   <prefix>-`>`
bind -r "<" swap-window -d -t -1
bind -r ">" swap-window -d -t +1

# monitor window activity toggle
#   <prefix>-m
bind m set -w monitor-activity \; \
    display-message -d 900 " Activity Monitor: #{?monitor-activity,on,off}"

# monitor window silence (quiet) toggle
#   <prefix>-q
bind q if-shell -F "#{monitor-silence}" {
    set -w monitor-silence 0
    display-message -d 900 " Silence Monitor: off"
}{
    set -w monitor-silence 10
    display-message -d 900 " Silence Monitor: on"
}


##
# Panes
#
# split active pane, new panes start in parent pane's path
#   <prefix>-v - vertical
#   <prefix>-h - horizontal
# ignore the "reversed" flags, opinions differ on what a split is
# https://github.com/tmux/tmux/issues/213
bind v split-window -h -c "#{pane_current_path}"
bind h split-window -v -c "#{pane_current_path}"

# split active pane across all panes
#   <prefix>-V - vertical full height
#   <prefix>-H - horizontal full width
bind V split-window -hf -c "#{pane_current_path}"
bind H split-window -vf -c "#{pane_current_path}"

# change active pane
#   Shift+ArrowKey
# smart pane switching with awareness of Vim splits
%hidden is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?)(diff)?$'"
bind -n S-Left  if-shell "$is_vim" "send-keys S-Left"  "select-pane -L"
bind -n S-Right if-shell "$is_vim" "send-keys S-Right" "select-pane -R"
bind -n S-Up    if-shell "$is_vim" "send-keys S-Up"    "select-pane -U"
bind -n S-Down  if-shell "$is_vim" "send-keys S-Down"  "select-pane -D"

bind -T copy-mode-vi S-Left  select-pane -L
bind -T copy-mode-vi S-Right select-pane -R
bind -T copy-mode-vi S-Up    select-pane -U
bind -T copy-mode-vi S-Down  select-pane -D

# synchronise panes toggle
#   <prefix>-Ctrl+s
bind C-S set-window-option synchronize-panes

# move pane
#   <prefix>-Ctrl+(
#   <prefix>-Ctrl+)
bind -r "(" swap-pane -U
bind -r ")" swap-pane -D

# rotate panes
#   Ctrl+Shift+ArrowUp
#   Ctrl+Shift+ArrowDown
bind -n C-S-Up   rotate-window -U
bind -n C-S-Down rotate-window -D

# resize pane
#   <prefix>-Ctrl+ArrowKey
#   <prefix>-Ctrl+Shift+ArrowKey (fine tuning)
bind -r C-Left    resize-pane -L 5
bind -r C-Right   resize-pane -R 5
bind -r C-Up      resize-pane -U 5
bind -r C-Down    resize-pane -D 5
bind -r C-S-Left  resize-pane -L
bind -r C-S-Right resize-pane -R
bind -r C-S-Up    resize-pane -U
bind -r C-S-Down  resize-pane -D

# break current pane into new window
#   <prefix>-b - after current
#   <prefix>-B - before current
bind b break-pane -a
bind B break-pane -b

# join window as new pane
#    <prefix>-j - to the side
#    <prefix>-J - beneath
bind j command-prompt -p " Join pane from window:" "join-pane -h -s :'%%'"
bind J command-prompt -p " Join pane from window:" "join-pane -v -s :'%%'"


##
# Mouse
#

# toggle mouse mode
#   <prefix>-M
bind M set mouse \; display-message -d 900 " Mouse Mode: #{?mouse,on,off}"

# vim: set filetype=tmux
