# A collection of settings inspired by/stolen from:
#   https://thevaluable.dev/tmux-config-mouseless/
#   https://github.com/tmux-plugins/tmux-yank
#   https://github.com/tmux-plugins/tmux-pain-control
#   https://github.com/Townk/tmux-config
#   https://github.com/christoomey/vim-tmux-navigator
#   https://github.com/gpakosz/.tmux
#   and elsewhere on the internet.
#

#
# Aliases Used (otherwise they are impossible to search for...)
#    Alias   | Long
#   ---------+-----------------
#    set     | set-option
#    bind    | bind-key
#    unbind  | unbind-key
#    display | display-message
#

# where tmux configs and scripts live
set -g @TMUX_DIR "$HOME/.config/tmux"
# session info
%hidden session_count="#(tmux list-sessions | wc -l)"
%hidden session_name="#{?#{e|>:${session_count},1},#{=/20/…:session_name},}"

####
# General Behaviour
#
# vi keys in copy mode
set -g mode-keys vi
# emacs for command line
set -g status-keys emacs
# on terminal exit, switch to another unattached session
set -g detach-on-destroy no-detached
# message timeout
set -g display-time 3500
# Start window and pane numbering from 1
set -g base-index 1
set -g pane-base-index 1
# Renumber windows when one is closed
set -g renumber-windows on
# scrollback buffer
set -g history-limit 10000
# more timely status updates, ditto for pane borders
set -g status-interval 5
# reduce timeout after hitting ESC
set -s escape-time 50
# display a message when window monitoring or bell is triggered
set -g visual-activity on
set -g visual-bell     on
set -g visual-silence  on
# but not in the current one...
set -g bell-action other
# pass focus events to applications running inside tmux
set -g focus-events on
# set title of terminal emulator
set -g set-titles on
%hidden session_title="#{?#{e|>:${session_count},1}, [${session_name}]: ,: }"
set -g set-titles-string \
    "@#{host} - tmux${session_title}#{window_name}#{?pane_title,: #{pane_title},}"


####
# Keybinds
#   - display current bindings with `tmux list-keys`
#   - TODO should prolly map some preconfigured layouts to the F keys

# first unbind what I'm not using
source-file -F "#{@TMUX_DIR}/tmux_unbind.conf"

# remap prefix from 'Ctrl+b' to 'Ctrl+f'
set -g prefix C-f
# send <prefix> to shell: <prefix>-<prefix>
# could be set but messes with extrakto plugin
# bind C-f send-prefix

# reload config file: <prefix>-r
bind r source-file -F "#{@TMUX_DIR}/tmux.conf" \; \
            display-message -d 900 " tmux config reloaded!"

# enter copy mode
bind    Up   copy-mode \; send-keys -X cursor-up
# enter copy mode and up half screen
%hidden isModeOrScreen="#{||:#{pane_in_mode},#{alternate_on}}"
%hidden isNotZsh="#{!=:#{pane_current_command},zsh}"
bind -n PageUp if-shell -F "#{||:#{E:$isModeOrScreen},#{E:$isNotZsh}}" {
        send-keys PageUp
    } {
        copy-mode -e
        send-keys -X halfpage-up
    }

# go directly into vi search mode and search up
# <prefix>-?
bind ? copy-mode \; \
    command-prompt -p "(search up)" {
        send-keys -X search-backward "%%"
    }

# copy mode keys, closer to those in vim: visual-select `v`, yank `y`
bind -T copy-mode-vi v send-keys -X begin-selection
# I would unbind this but tmux plugin manager seems to use it
# unbind -T copy-mode-vi Enter; # copy-selection

# Copy to clipboard using xsel if installed. Not using xclip as without a
# workaround xclip can make tmux unresponsive see:
# https://wiki.archlinux.org/title/Tmux#Clipboard_integration
if-shell "command -v xsel" {
    bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xsel --clipboard"
    bind -T copy-mode-vi Y send-keys -X \
        copy-pipe-and-cancel "xsel --clipboard; tmux paste-buffer"
} {
    run-shell "echo 'Install xsel for system clipboard integration'"
    bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel
    bind -T copy-mode-vi Y send-keys -X copy-pipe-and-cancel "tmux paste-buffer"
}

# clear both screen and history
bind -n C-l send-keys C-l \; run-shell "sleep 0.2" \; clear-history


## Sessions
# new-session: <prefix>-N
# refresh-client for timely status bar updates
bind N new-session \; refresh-client

# change session: Alt+ArrowUp/ArrowDown
bind -n M-Up   switch-client -p
bind -n M-Down switch-client -n

# select session/window, sorted by name: <prefix>-s
bind s choose-tree -sZ -O name


## Windows
# new-window: <prefix>-n
bind n new-window -c "#{pane_current_path}"

# change active window: Alt+ArrowLeft/ArrowRight
bind -n M-Left  select-window -p
bind -n M-Right select-window -n

# change to previously active window: <prefix>-`^`
bind ^ last-window

# move window: <prefix>-`<` and <prefix>-`>`
bind -r "<" swap-window -d -t -1
bind -r ">" swap-window -d -t +1

# Monitor window activity toggle
bind m set -w monitor-activity \; \
    display -d 900 " Activity Monitor: #{?monitor-activity,on,off}"

# Monitor window silence (quiet) toggle
bind q if-shell -F "#{monitor-silence}" {
    set -w monitor-silence 0
    display -d 900 " Silence Monitor: off"
}{
    set -w monitor-silence 10
    display -d 900 " Silence Monitor: on"
}

## Panes
# synchronise panes toggle: <prefix>-Ctrl+s
bind C-S set-window-option synchronize-panes

# split active pane, new panes start in parent pane's path
#   vertical: <prefix>-v
# horizontal: <prefix>-h
# ignore the "reversed" flags, opinions differ on what a split is
# https://github.com/tmux/tmux/issues/213
bind v split-window -h -c "#{pane_current_path}"
bind h split-window -v -c "#{pane_current_path}"

# split active pane across all panes
#  vertical full height: <prefix>-V
# horizontal full width: <prefix>-H
bind V split-window -hf -c "#{pane_current_path}"
bind H split-window -vf -c "#{pane_current_path}"

# Smart pane switching with awareness of Vim splits
%hidden is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?)(diff)?$'"
bind -n S-Left  if-shell "$is_vim" "send-keys S-Left"  "select-pane -L"
bind -n S-Right if-shell "$is_vim" "send-keys S-Right" "select-pane -R"
bind -n S-Up    if-shell "$is_vim" "send-keys S-Up"    "select-pane -U"
bind -n S-Down  if-shell "$is_vim" "send-keys S-Down"  "select-pane -D"

bind -T copy-mode-vi S-Left  select-pane -L
bind -T copy-mode-vi S-Right select-pane -R
bind -T copy-mode-vi S-Up    select-pane -U
bind -T copy-mode-vi S-Down  select-pane -D

# swap active pane position: <prefix>-Ctrl+( <prefix>-Ctrl+)
bind -r "(" swap-pane -U
bind -r ")" swap-pane -D

# rotate panes: Ctrl+Shift+ArrowUp/ArrowDown
bind -n C-S-Up   rotate-window -U
bind -n C-S-Down rotate-window -D

# resize pane: <prefix>-Ctrl+ArrowKey
#              <prefix>-Ctrl+Shift+ArrowKey (fine tuning)
bind -r C-Left    resize-pane -L 5
bind -r C-Right   resize-pane -R 5
bind -r C-Up      resize-pane -U 5
bind -r C-Down    resize-pane -D 5
bind -r C-S-Left  resize-pane -L
bind -r C-S-Right resize-pane -R
bind -r C-S-Up    resize-pane -U
bind -r C-S-Down  resize-pane -D

# break current pane into new window
bind b break-pane -a # after current
bind B break-pane -b # before current
# join window as new pane
# to the side
bind j command-prompt -p " Join pane from window:" "join-pane -h -s :'%%'"
# beneath
bind J command-prompt -p " Join pane from window:" "join-pane -v -s :'%%'"

## Mouse Toggle
bind M set mouse \; display -d 900 " Mouse Mode: #{?mouse,on,off}"

####
# Colours
#
# 256 colour - also xterm compatible keycodes
# https://github.com/tmux/tmux/wiki/FAQ#how-do-i-make-modified-function-and-arrow-keys-like-c-up-m-pageup-work-inside-tmux
set -g default-terminal "tmux-256color"

# enable 24-bit truecolor if supported by the terminal
#    https://github.com/termstandard/colors
#    https://jdhao.github.io/2018/10/19/tmux_nvim_true_color/
#    https://gist.github.com/andersevenrud/015e61af2fd264371032763d4ed965b6
if-shell "env | grep -q COLORTERM=truecolor" {
    set -ag terminal-overrides ",$TERM:RGB"
}

# command and bottom screen message
set -g message-style "fg=colour7,bg=colour4"
# when command is in vi normal mode
set -g message-command-style "fg=colour7,bg=colour2"
# session select and line counter in copy mode
set -g mode-style "fg=colour7,bg=colour4"


####
# Pane Appearance
#
## borders
set -g pane-active-border-style fg=colour4
set -g pane-border-style        fg=colour240

## status
# inspired by the info dump here:
# https://unix.stackexchange.com/questions/564618/set-tmux-pane-title-to-user-defined-if-exists-else-current-working-file-or-dire/564636#564636
# displays the pane number, pane title (if set), running command with arguments,
# and PID(s) of the pane's running process(es), not including the shell itself
# nor its subprocesses
set -g  pane-border-status top
set -g  pane-border-format " ###{pane_index}"
set -ga pane-border-format "#{?pane_title,: #{=/20/…:pane_title},}"
set -ga pane-border-format \
    " #(#{@TMUX_DIR}/pane_processes.tmux #{pane_pid} #{pane_current_command})"
set -ga pane-border-format " #{s/#{HOME}/~/:pane_current_path}";
set -ga pane-border-format " #{?alternate_on,<Alt Mode> ,}"


####
# Status Bar
#
# default colours
set -g  status-style fg="#bdbaae" # close to colour250
set -ga status-style bg=colour234

# configurable ornamentation
set -g @ornamentation 1
set -g @symbols 1

# some convenience shorthands
%hidden rf="#[fg=default]"
%hidden rb="#[bg=default]"
%hidden df="#[default]"


## Left Side
# host and session name
set -g status-left-length 50

# hostname
set -g status-left "#[bg=colour237]"
if-shell -F "#{@ornamentation}" {
    %hidden h_orn=╱
    # blue
    set -ga status-left "#[fg=#385980]$h_orn"
    set -ga status-left "#[fg=#4974A6]$h_orn"
    set -ga status-left "#[fg=#5486C0]$h_orn"
    set -ga status-left "#[fg=#5A8FCC]$h_orn"
    set -ga status-left "$rf"
}
if-shell -F "#{@symbols}" {
    set -ga status-left " #[fg=colour242]@$rf"
} {
    set -ga status-left " "
}
set -ga status-left "#{=/20/…:host} "

# session name formatting
set -g @session_status "#[bg=colour236]"
if-shell -F "#{@ornamentation}" {
    %hidden s_orn=╱
    set -ga @session_status "#[fg=colour239]$s_orn"
    set -ga @session_status "#[fg=colour240]$s_orn"
    set -ga @session_status "$rf"
}
if-shell -F "#{@symbols}" {
    set -ga @session_status " #[fg=colour242]≡$rf"
} {
    set -ga @session_status " "
}
set -ga @session_status "$session_name "

# display session name if > 1 sessions running
set -ga status-left "#{?#{e|>:${session_count},1},#{E:@session_status},}"

# end status left
set -ga status-left "$df "


## Window Presentation
# indices
set -g @wic "#[fg=#79a1ce]#{window_index}$df" # roughly colour110
set -g @wi  "#[fg=colour4]#{window_index}$df"

# additional window information
set -g @warn        "#[bold]#[fg=colour7,bg=colour1]"
set -g @info        "#[bg=colour4]"
set -g @sync        "#{?synchronize-panes,#{@warn} PANES SYNC'D $df,}"
set -g @silence     "#{@info}#{?monitor-silence,  ,}$df"
set -g @activity    "#{@info}#{?monitor-activity,  ,}$df"
set -g @window_info "#{E:@sync}#{E:@silence}#{E:@activity}"

# current window
%hidden br="#[fg=colour241]▕$rf"
%hidden bl="#[fg=colour241]▏$rf"
set -g window-status-current-style bg=colour238,fg="#dedcd6" # roughly colour188
set -g window-status-current-format \
    "$bl#{E:@wic}:#{window_name}#{$window_flags}$br#{E:@window_info}"

# other windows
set -g window-status-last-style bg=colour237
set -g window-status-style      bg=colour236
set -g window-status-format     " #{E:@wi}:#{window_name}#{$window_flags} "

# activity alerts
set -g window-status-activity-style reverse
# bell
set -g window-status-bell-style reverse

# custom window flags
#    Flag | Meaning  | New | Alt.
#   ------+----------+-----+------------
#      *  | current  |     |
#      -  | last     |     |
#      #  | activity |    |    🗯 🖉
#      ~  | silence  |    |  🔇 🔕
#      !  | bell     |    |  ⍾  🔊 🔔
#      Z  | zoomed   |    |    🔍
%hidden window_flags="#{s/Z/ /:#{s/!/ :#{s/\~/ /:#{s/##/ /:#{s/-//:#{s/\\*//:window_raw_flags}}}}}}"


## Right Side
set -g status-right-length 150

# prefix indication
set -g @pfix "#[fg=colour7,bg=colour4]#[bold]"
set -g status-right "#{?client_prefix,#{@pfix} - PREFIX - $df,}"

# more pointless ornamentation
if-shell -F "#{@ornamentation}" {
    %hidden l_orn="│"
    set -ga status-right "#[fg=colour235]$l_orn"
    set -ga status-right "#[fg=colour236]$l_orn"
    set -ga status-right "#[fg=colour237]$l_orn"
    set -ga status-right "#[fg=colour238]$l_orn"
    set -ga status-right "$df"
}

# pane title (truncated), date, and time
set -ga status-right "#{?pane_title, \"#{=/20/…:pane_title}\" ,}"
set -ga status-right "#[bg=colour236] %d-%b-%Y "
set -ga status-right "#[bg=colour237] %H:%M "


####
# Plugins
# https://github.com/tmux-plugins/tpm
#

# copycat
# https://github.com/tmux-plugins/tmux-copycat
# <prefix>-Ctrl+f - simple file search
# <prefix>-Ctrl+g - jumping over git status files (best used after git status command)
# <prefix>-Alt+h  - jumping over SHA-1/SHA-256 hashes (best used after git log command)
# <prefix>-Ctrl+u - url search (http, ftp and git urls)
# <prefix>-Ctrl+d - number search (mnemonic d, as digit)
# <prefix>-Alt+i  - ip address search
set -g @plugin "tmux-plugins/tmux-copycat"

# extrakto
# https://github.com/laktak/extrakto
# <prefix>-tab
if-shell "command -v fzf" {
    set -g @plugin "laktak/extrakto"
}

# Initialise tmux plugin manager. Must be at the end of tmux config
# install new plugins: <prefix>-I
run-shell "#{@TMUX_DIR}/plugins/tpm/tpm"

